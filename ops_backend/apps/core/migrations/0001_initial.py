# Generated by Django 4.2.7 on 2025-09-30 16:55

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "employee_id",
                    models.CharField(
                        blank=True,
                        help_text="Employee ID number",
                        max_length=20,
                        unique=True,
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        help_text="Primary phone number",
                        max_length=17,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                (
                    "mobile",
                    models.CharField(
                        blank=True,
                        help_text="Mobile phone number",
                        max_length=17,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True, help_text="Job title or position", max_length=100
                    ),
                ),
                (
                    "department",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("development", "Development"),
                            ("design", "Design"),
                            ("project_management", "Project Management"),
                            ("business_development", "Business Development"),
                            ("operations", "Operations"),
                            ("finance", "Finance"),
                            ("hr", "Human Resources"),
                            ("admin", "Administration"),
                        ],
                        help_text="Department within Sumano Tech",
                        max_length=100,
                    ),
                ),
                (
                    "hire_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when this employee was hired",
                        null=True,
                    ),
                ),
                (
                    "employment_status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("on_leave", "On Leave"),
                            ("terminated", "Terminated"),
                        ],
                        default="active",
                        help_text="Current employment status",
                        max_length=20,
                    ),
                ),
                (
                    "timezone",
                    models.CharField(
                        default="UTC", help_text="User's timezone", max_length=50
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        default="en", help_text="Preferred language", max_length=10
                    ),
                ),
                (
                    "bio",
                    models.TextField(
                        blank=True, help_text="Brief biography or description"
                    ),
                ),
                (
                    "skills",
                    models.JSONField(
                        default=list, help_text="List of technical skills (JSON array)"
                    ),
                ),
                (
                    "last_login_ip",
                    models.GenericIPAddressField(
                        blank=True, help_text="IP address of last login", null=True
                    ),
                ),
                (
                    "failed_login_attempts",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of failed login attempts"
                    ),
                ),
                (
                    "account_locked_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="Account locked until this date/time",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "ordering": ["last_name", "first_name"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Client",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "client_since",
                    models.DateField(
                        help_text="Date when this organization became a client"
                    ),
                ),
                (
                    "relationship_status",
                    models.CharField(
                        choices=[
                            ("prospect", "Prospect"),
                            ("active", "Active Client"),
                            ("on_hold", "On Hold"),
                            ("former", "Former Client"),
                        ],
                        default="prospect",
                        help_text="Current relationship status",
                        max_length=20,
                    ),
                ),
                (
                    "contract_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("project_based", "Project-Based"),
                            ("retainer", "Retainer Agreement"),
                            ("hourly", "Hourly Consulting"),
                            ("fixed_price", "Fixed Price"),
                            ("milestone", "Milestone-Based"),
                        ],
                        help_text="Type of contract or engagement model",
                        max_length=50,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Internal notes about this client relationship",
                    ),
                ),
                (
                    "internal_rating",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Poor"),
                            (2, "Fair"),
                            (3, "Good"),
                            (4, "Very Good"),
                            (5, "Excellent"),
                        ],
                        help_text="Internal rating of client relationship (1-5)",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Client",
                "verbose_name_plural": "Clients",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Contact",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "first_name",
                    models.CharField(help_text="Contact's first name", max_length=100),
                ),
                (
                    "last_name",
                    models.CharField(help_text="Contact's last name", max_length=100),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True, help_text="Job title or position", max_length=100
                    ),
                ),
                (
                    "department",
                    models.CharField(
                        blank=True,
                        help_text="Department within the organization",
                        max_length=100,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Primary email address", max_length=254
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        help_text="Primary phone number",
                        max_length=17,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                (
                    "mobile",
                    models.CharField(
                        blank=True,
                        help_text="Mobile phone number",
                        max_length=17,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                (
                    "role_type",
                    models.CharField(
                        choices=[
                            ("decision_maker", "Decision Maker"),
                            ("project_manager", "Project Manager"),
                            ("technical_lead", "Technical Lead"),
                            ("stakeholder", "Stakeholder"),
                            ("end_user", "End User"),
                            ("billing", "Billing Contact"),
                            ("other", "Other"),
                        ],
                        default="stakeholder",
                        help_text="Type of role in project relationship",
                        max_length=50,
                    ),
                ),
                (
                    "is_primary_contact",
                    models.BooleanField(
                        default=False,
                        help_text="Is this the primary contact for the organization?",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("former", "Former"),
                        ],
                        default="active",
                        help_text="Current status of this contact",
                        max_length=20,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about this contact"
                    ),
                ),
            ],
            options={
                "verbose_name": "Contact",
                "verbose_name_plural": "Contacts",
                "ordering": ["organization", "last_name", "first_name"],
            },
        ),
        migrations.CreateModel(
            name="DocumentInstance",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "template_version",
                    models.CharField(
                        help_text="Version of the template used", max_length=20
                    ),
                ),
                (
                    "document_name",
                    models.CharField(
                        help_text="Name of this specific document instance",
                        max_length=200,
                    ),
                ),
                (
                    "document_type",
                    models.CharField(
                        help_text="Type of document (copied from template)",
                        max_length=50,
                    ),
                ),
                (
                    "filled_data",
                    models.JSONField(
                        help_text="Data used to fill the template placeholders"
                    ),
                ),
                (
                    "rendered_content",
                    models.TextField(
                        blank=True, help_text="Final rendered document content"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("review", "Under Review"),
                            ("approved", "Approved"),
                            ("sent_to_client", "Sent to Client"),
                            ("client_approved", "Client Approved"),
                            ("final", "Final"),
                            ("superseded", "Superseded"),
                        ],
                        default="draft",
                        help_text="Current status of this document",
                        max_length=20,
                    ),
                ),
                (
                    "file_path",
                    models.CharField(
                        blank=True,
                        help_text="Path to the generated document file",
                        max_length=500,
                    ),
                ),
                (
                    "file_size",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Size of the document file in bytes",
                        null=True,
                    ),
                ),
                (
                    "file_format",
                    models.CharField(
                        choices=[
                            ("html", "HTML"),
                            ("pdf", "PDF"),
                            ("docx", "Microsoft Word"),
                            ("txt", "Plain Text"),
                            ("md", "Markdown"),
                        ],
                        default="pdf",
                        help_text="Format of the generated document",
                        max_length=20,
                    ),
                ),
                (
                    "review_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date when document was reviewed",
                        null=True,
                    ),
                ),
                (
                    "approval_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date when document was approved",
                        null=True,
                    ),
                ),
                (
                    "sent_to_client_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date when document was sent to client",
                        null=True,
                    ),
                ),
                (
                    "client_approval_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date when client approved the document",
                        null=True,
                    ),
                ),
                (
                    "client_feedback",
                    models.TextField(
                        blank=True, help_text="Feedback received from client"
                    ),
                ),
                (
                    "requires_revision",
                    models.BooleanField(
                        default=False,
                        help_text="Does this document require revision based on client feedback?",
                    ),
                ),
                (
                    "version_number",
                    models.PositiveIntegerField(
                        default=1, help_text="Version number of this document instance"
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Internal notes about this document"
                    ),
                ),
            ],
            options={
                "verbose_name": "Document Instance",
                "verbose_name_plural": "Document Instances",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DocumentTemplate",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the document template", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Description of what this template is used for"
                    ),
                ),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("proposal", "Project Proposal"),
                            ("contract", "Service Contract"),
                            ("scope_of_work", "Scope of Work"),
                            ("project_plan", "Project Plan"),
                            ("status_report", "Status Report"),
                            ("final_report", "Final Report"),
                            ("user_manual", "User Manual"),
                            ("technical_specification", "Technical Specification"),
                            ("test_plan", "Test Plan"),
                            ("deliverable", "Project Deliverable"),
                            ("invoice", "Invoice"),
                            ("change_request", "Change Request"),
                            ("other", "Other"),
                        ],
                        help_text="Type of document this template represents",
                        max_length=50,
                    ),
                ),
                (
                    "applicable_service_types",
                    models.JSONField(
                        default=list,
                        help_text="Service types this template applies to (JSON array)",
                    ),
                ),
                (
                    "template_content",
                    models.TextField(
                        help_text="Template content with placeholder variables (e.g., {{client_name}})"
                    ),
                ),
                (
                    "template_format",
                    models.CharField(
                        choices=[
                            ("html", "HTML"),
                            ("markdown", "Markdown"),
                            ("plain_text", "Plain Text"),
                            ("docx", "Microsoft Word"),
                            ("pdf", "PDF"),
                        ],
                        default="html",
                        help_text="Format of the template content",
                        max_length=20,
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        default="1.0",
                        help_text="Version number of this template",
                        max_length=20,
                    ),
                ),
                (
                    "is_current_version",
                    models.BooleanField(
                        default=True,
                        help_text="Is this the current version of the template?",
                    ),
                ),
                (
                    "required_fields",
                    models.JSONField(
                        default=list,
                        help_text="List of required fields for this template (JSON array)",
                    ),
                ),
                (
                    "optional_fields",
                    models.JSONField(
                        default=list,
                        help_text="List of optional fields for this template (JSON array)",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("active", "Active"),
                            ("deprecated", "Deprecated"),
                            ("archived", "Archived"),
                        ],
                        default="draft",
                        help_text="Current status of this template",
                        max_length=20,
                    ),
                ),
                (
                    "usage_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of times this template has been used",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Internal notes about this template"
                    ),
                ),
            ],
            options={
                "verbose_name": "Document Template",
                "verbose_name_plural": "Document Templates",
                "ordering": ["name", "-version"],
            },
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Official organization name", max_length=200
                    ),
                ),
                (
                    "legal_name",
                    models.CharField(
                        blank=True,
                        help_text="Legal entity name if different from organization name",
                        max_length=200,
                    ),
                ),
                (
                    "organization_type",
                    models.CharField(
                        choices=[
                            ("business", "Business"),
                            ("nonprofit", "Non-Profit Organization"),
                            ("educational", "Educational Institution"),
                            ("government", "Government Agency"),
                            ("healthcare", "Healthcare Organization"),
                            ("other", "Other"),
                        ],
                        default="business",
                        help_text="Type of organization",
                        max_length=50,
                    ),
                ),
                (
                    "industry",
                    models.CharField(
                        blank=True,
                        help_text="Industry or sector the organization operates in",
                        max_length=100,
                    ),
                ),
                (
                    "website",
                    models.URLField(blank=True, help_text="Organization's website URL"),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Brief description of the organization"
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        help_text="Primary contact phone number",
                        max_length=17,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        help_text="Primary contact email address",
                        max_length=254,
                    ),
                ),
                (
                    "address_line1",
                    models.CharField(
                        blank=True, help_text="Street address line 1", max_length=200
                    ),
                ),
                (
                    "address_line2",
                    models.CharField(
                        blank=True, help_text="Street address line 2", max_length=200
                    ),
                ),
                (
                    "city",
                    models.CharField(blank=True, help_text="City", max_length=100),
                ),
                (
                    "state_province",
                    models.CharField(
                        blank=True, help_text="State or Province", max_length=100
                    ),
                ),
                (
                    "postal_code",
                    models.CharField(
                        blank=True, help_text="Postal/ZIP code", max_length=20
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        blank=True,
                        default="United States",
                        help_text="Country",
                        max_length=100,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("prospect", "Prospect"),
                            ("former", "Former Client"),
                        ],
                        default="prospect",
                        help_text="Current relationship status with Sumano Tech",
                        max_length=20,
                    ),
                ),
            ],
            options={
                "verbose_name": "Organization",
                "verbose_name_plural": "Organizations",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Permission",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Unique name for this permission (e.g., 'view_projects')",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "codename",
                    models.CharField(
                        help_text="Code name for this permission (e.g., 'view_project')",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Description of what this permission allows"
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("client", "Client Management"),
                            ("project", "Project Management"),
                            ("document", "Document Management"),
                            ("user", "User Management"),
                            ("system", "System Administration"),
                            ("reporting", "Reporting"),
                            ("financial", "Financial"),
                        ],
                        help_text="Category this permission belongs to",
                        max_length=50,
                    ),
                ),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("global", "Global"),
                            ("organization", "Organization"),
                            ("project", "Project"),
                            ("document", "Document"),
                            ("user", "User"),
                        ],
                        default="global",
                        help_text="Type of resource this permission applies to",
                        max_length=50,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Is this permission currently active?"
                    ),
                ),
            ],
            options={
                "verbose_name": "Permission",
                "verbose_name_plural": "Permissions",
                "ordering": ["category", "name"],
            },
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "project_name",
                    models.CharField(help_text="Name of the project", max_length=200),
                ),
                (
                    "project_code",
                    models.CharField(
                        blank=True,
                        help_text="Internal project code (e.g., PROJ-2024-001)",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "service_type",
                    models.CharField(
                        choices=[
                            ("web_development", "Website Development"),
                            ("mobile_app", "Mobile Application"),
                            ("operations_system", "Operations Management System"),
                            ("portal", "Portal Development"),
                            ("audit", "System Audit"),
                            ("consulting", "Technical Consulting"),
                            ("maintenance", "System Maintenance"),
                            ("integration", "System Integration"),
                            ("migration", "Data/System Migration"),
                        ],
                        help_text="Type of service we are providing",
                        max_length=50,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed project description and scope"
                    ),
                ),
                (
                    "objectives",
                    models.TextField(
                        blank=True, help_text="Project objectives and success criteria"
                    ),
                ),
                ("start_date", models.DateField(help_text="Project start date")),
                (
                    "target_end_date",
                    models.DateField(
                        blank=True,
                        help_text="Target project completion date",
                        null=True,
                    ),
                ),
                (
                    "actual_end_date",
                    models.DateField(
                        blank=True,
                        help_text="Actual project completion date",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("planning", "Planning"),
                            ("in_progress", "In Progress"),
                            ("review", "Under Review"),
                            ("testing", "Testing"),
                            ("delivered", "Delivered"),
                            ("ongoing_support", "Ongoing Support"),
                            ("completed", "Completed"),
                            ("on_hold", "On Hold"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="planning",
                        help_text="Current status of the project",
                        max_length=50,
                    ),
                ),
                (
                    "progress_percentage",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Project completion percentage (0-100)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "estimated_hours",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Estimated total hours for this project",
                        null=True,
                    ),
                ),
                (
                    "actual_hours",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Actual hours spent on this project",
                        null=True,
                    ),
                ),
                (
                    "budget",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Project budget in USD",
                        max_digits=12,
                        null=True,
                    ),
                ),
                (
                    "actual_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Actual project cost in USD",
                        max_digits=12,
                        null=True,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        help_text="Project priority level",
                        max_length=20,
                    ),
                ),
                (
                    "risk_level",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                        ],
                        default="medium",
                        help_text="Project risk assessment",
                        max_length=20,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Internal project notes and updates"
                    ),
                ),
                (
                    "deliverables",
                    models.TextField(
                        blank=True, help_text="List of project deliverables"
                    ),
                ),
                (
                    "client",
                    models.ForeignKey(
                        help_text="Client organization this project is for",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="projects",
                        to="core.client",
                    ),
                ),
                (
                    "client_contact",
                    models.ForeignKey(
                        blank=True,
                        help_text="Primary client contact for this project",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="project_contacts",
                        to="core.contact",
                    ),
                ),
                (
                    "project_manager",
                    models.ForeignKey(
                        blank=True,
                        help_text="Sumano Tech project manager assigned to this project",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managed_projects",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Project",
                "verbose_name_plural": "Projects",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of this role (e.g., 'Project Manager')",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "codename",
                    models.CharField(
                        help_text="Code name for this role (e.g., 'project_manager')",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Description of this role and its responsibilities"
                    ),
                ),
                (
                    "level",
                    models.PositiveIntegerField(
                        default=1,
                        help_text="Hierarchy level (higher number = more permissions)",
                    ),
                ),
                (
                    "is_system_role",
                    models.BooleanField(
                        default=False,
                        help_text="Is this a system-defined role that cannot be modified?",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Is this role currently active?"
                    ),
                ),
                (
                    "user_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of users currently assigned this role",
                    ),
                ),
                (
                    "parent_role",
                    models.ForeignKey(
                        blank=True,
                        help_text="Parent role in the hierarchy",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="child_roles",
                        to="core.role",
                    ),
                ),
                (
                    "permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Permissions assigned to this role",
                        related_name="roles",
                        to="core.permission",
                    ),
                ),
            ],
            options={
                "verbose_name": "Role",
                "verbose_name_plural": "Roles",
                "ordering": ["level", "name"],
            },
        ),
        migrations.CreateModel(
            name="ProjectPhase",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "phase_name",
                    models.CharField(
                        help_text="Name of this project phase", max_length=200
                    ),
                ),
                (
                    "phase_number",
                    models.PositiveIntegerField(
                        help_text="Sequential number of this phase within the project"
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Description of what this phase entails"
                    ),
                ),
                (
                    "deliverables",
                    models.TextField(
                        blank=True, help_text="Specific deliverables for this phase"
                    ),
                ),
                ("start_date", models.DateField(help_text="Phase start date")),
                (
                    "target_end_date",
                    models.DateField(help_text="Target phase completion date"),
                ),
                (
                    "actual_end_date",
                    models.DateField(
                        blank=True, help_text="Actual phase completion date", null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("not_started", "Not Started"),
                            ("in_progress", "In Progress"),
                            ("review", "Under Review"),
                            ("completed", "Completed"),
                            ("on_hold", "On Hold"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="not_started",
                        help_text="Current status of this phase",
                        max_length=50,
                    ),
                ),
                (
                    "progress_percentage",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Phase completion percentage (0-100)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "estimated_hours",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Estimated hours for this phase",
                        null=True,
                    ),
                ),
                (
                    "actual_hours",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Actual hours spent on this phase",
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Phase-specific notes and updates"
                    ),
                ),
                (
                    "depends_on",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Other phases that must be completed before this phase",
                        related_name="dependent_phases",
                        to="core.projectphase",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        help_text="Project this phase belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="phases",
                        to="core.project",
                    ),
                ),
            ],
            options={
                "verbose_name": "Project Phase",
                "verbose_name_plural": "Project Phases",
                "ordering": ["project", "phase_number"],
            },
        ),
        migrations.AddIndex(
            model_name="permission",
            index=models.Index(
                fields=["category"], name="core_permis_categor_02cd82_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="permission",
            index=models.Index(
                fields=["codename"], name="core_permis_codenam_1da12d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="permission",
            index=models.Index(
                fields=["is_active"], name="core_permis_is_acti_04a15b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="organization",
            index=models.Index(fields=["name"], name="core_organi_name_d0cc3b_idx"),
        ),
        migrations.AddIndex(
            model_name="organization",
            index=models.Index(fields=["status"], name="core_organi_status_65d0dc_idx"),
        ),
        migrations.AddIndex(
            model_name="organization",
            index=models.Index(
                fields=["organization_type"], name="core_organi_organiz_58eb74_idx"
            ),
        ),
        migrations.AddField(
            model_name="documenttemplate",
            name="previous_version",
            field=models.ForeignKey(
                blank=True,
                help_text="Previous version of this template",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="next_versions",
                to="core.documenttemplate",
            ),
        ),
        migrations.AddField(
            model_name="documentinstance",
            name="approved_by",
            field=models.ForeignKey(
                blank=True,
                help_text="User who approved this document",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="approved_documents",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="documentinstance",
            name="created_by",
            field=models.ForeignKey(
                help_text="User who created this document",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="created_documents",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="documentinstance",
            name="project",
            field=models.ForeignKey(
                help_text="Project this document belongs to",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="documents",
                to="core.project",
            ),
        ),
        migrations.AddField(
            model_name="documentinstance",
            name="reviewed_by",
            field=models.ForeignKey(
                blank=True,
                help_text="User who reviewed this document",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="reviewed_documents",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="documentinstance",
            name="superseded_by",
            field=models.ForeignKey(
                blank=True,
                help_text="Document that supersedes this one",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="supersedes",
                to="core.documentinstance",
            ),
        ),
        migrations.AddField(
            model_name="documentinstance",
            name="template",
            field=models.ForeignKey(
                help_text="Template used to create this document",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="instances",
                to="core.documenttemplate",
            ),
        ),
        migrations.AddField(
            model_name="contact",
            name="organization",
            field=models.ForeignKey(
                help_text="Organization this contact belongs to",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="contacts",
                to="core.organization",
            ),
        ),
        migrations.AddField(
            model_name="client",
            name="billing_contact",
            field=models.ForeignKey(
                blank=True,
                help_text="Primary billing contact for this client",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="billing_clients",
                to="core.contact",
            ),
        ),
        migrations.AddField(
            model_name="client",
            name="organization",
            field=models.OneToOneField(
                help_text="Organization this client profile represents",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="client_profile",
                to="core.organization",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="additional_roles",
            field=models.ManyToManyField(
                blank=True,
                help_text="Additional roles assigned to this user",
                related_name="additional_users",
                to="core.role",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                help_text="User who created this account",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="created_users",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="role",
            field=models.ForeignKey(
                blank=True,
                help_text="Primary role assigned to this user",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="users",
                to="core.role",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AddIndex(
            model_name="role",
            index=models.Index(fields=["level"], name="core_role_level_c3a225_idx"),
        ),
        migrations.AddIndex(
            model_name="role",
            index=models.Index(
                fields=["codename"], name="core_role_codenam_3fda00_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="role",
            index=models.Index(
                fields=["is_active"], name="core_role_is_acti_cf5dc6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="projectphase",
            index=models.Index(
                fields=["project", "status"], name="core_projec_project_6007bf_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="projectphase",
            index=models.Index(
                fields=["start_date"], name="core_projec_start_d_8d601c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="projectphase",
            index=models.Index(fields=["status"], name="core_projec_status_22c704_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="projectphase",
            unique_together={("project", "phase_number")},
        ),
        migrations.AddIndex(
            model_name="project",
            index=models.Index(
                fields=["client"], name="core_projec_client__9c8c9d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="project",
            index=models.Index(fields=["status"], name="core_projec_status_2020cc_idx"),
        ),
        migrations.AddIndex(
            model_name="project",
            index=models.Index(
                fields=["service_type"], name="core_projec_service_f32bf6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="project",
            index=models.Index(
                fields=["start_date"], name="core_projec_start_d_345e9e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="project",
            index=models.Index(
                fields=["project_code"], name="core_projec_project_9c3459_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="documenttemplate",
            index=models.Index(
                fields=["document_type"], name="core_docume_documen_fed358_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="documenttemplate",
            index=models.Index(fields=["status"], name="core_docume_status_6a8c71_idx"),
        ),
        migrations.AddIndex(
            model_name="documenttemplate",
            index=models.Index(
                fields=["is_current_version"], name="core_docume_is_curr_b0ebd5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="documentinstance",
            index=models.Index(
                fields=["project"], name="core_docume_project_87f2ae_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="documentinstance",
            index=models.Index(
                fields=["template"], name="core_docume_templat_ab7f5c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="documentinstance",
            index=models.Index(fields=["status"], name="core_docume_status_4ba2d9_idx"),
        ),
        migrations.AddIndex(
            model_name="documentinstance",
            index=models.Index(
                fields=["document_type"], name="core_docume_documen_f55e34_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="contact",
            index=models.Index(
                fields=["organization", "is_primary_contact"],
                name="core_contac_organiz_b98e65_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="contact",
            index=models.Index(fields=["email"], name="core_contac_email_800caf_idx"),
        ),
        migrations.AddIndex(
            model_name="contact",
            index=models.Index(
                fields=["role_type"], name="core_contac_role_ty_6e2403_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="contact",
            unique_together={("organization", "email")},
        ),
        migrations.AddIndex(
            model_name="client",
            index=models.Index(
                fields=["relationship_status"], name="core_client_relatio_b52dd6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="client",
            index=models.Index(
                fields=["client_since"], name="core_client_client__d5dcf7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="client",
            index=models.Index(
                fields=["contract_type"], name="core_client_contrac_0a9eb9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["employee_id"], name="core_user_employe_506d81_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["department"], name="core_user_departm_04962c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["employment_status"], name="core_user_employm_b148a6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["role"], name="core_user_role_id_4f05c9_idx"),
        ),
    ]
